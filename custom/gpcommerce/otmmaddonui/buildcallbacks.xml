<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.

  
--><!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="otmmaddonui_before_clean"/>
		 <macrodef name="otmmaddonui_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="otmmaddonui_before_build"/>
		 <macrodef name="otmmaddonui_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="otmmaddonui_before_compile_core">
		 <macrodef name="otmmaddonui_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="otmmaddonui_before_compile_web" />
		 <macrodef name="otmmaddonui_after_compile_web" />
	 
	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="otmmaddonui_before_compile_hmc" />
		 <macrodef name="otmmaddonui_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="otmmaddonui_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="otmmaddonui_before_ear"/>
		 <macrodef name="otmmaddonui_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="otmmaddonui_before_production" />
		 <macrodef name="otmmaddonui_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="otmmaddonui_before_yunitinit" />
		 <macrodef name="otmmaddonui_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="otmmaddonui_before_yunit" />
		 <macrodef name="otmmaddonui_after_yunit" /> 
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="otmmaddonui_after_dist"/>
		 <macrodef name="otmmaddonui_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="otmmaddonui_before_dist_copy"/>
		 <macrodef name="otmmaddonui_after_dist_copy"/>
		  
 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.otmmaddonui.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.otmmaddonui.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>
 
--><project name="otmmaddonui_buildcallbacks">
	
	<property name="otmmaddonui.dir" location="${ext.otmmaddonui.path}"/>
	<property name="configure.resources.dir" location="${otmmaddonui.dir}/resources/configure"/>
	<property name="update.indexzul.properties" location="${configure.resources.dir}/update_indexzul.properties"/>
	<property file="${update.indexzul.properties}"/>
	
	<property name="update.indexzul.xsl" location="${configure.resources.dir}/update_indexzul.xsl"/>
	<property name="otmmaddonui.echo.taskname" value="otmmaddonui"/>
	
	<property name="build.number.file" location="${otmmaddonui.dir}/build.number" />
	<property file="${build.number.file}" prefix="otmmaddonui"/>
	
	<!-- overwritten by value from build.number -->
	<property name="otmmaddonui.version" value="16.4.0"/>

	<!-- 
	    Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file
	
	     ${ear.path}: 			path to ear
	 -->
	<macrodef name="otmmaddonui_before_ear">
		<sequential>

			<!-- you can do anything before the EAR file is being packed -->

		</sequential>
	</macrodef>
	
	<macrodef name="updatezul">
		<attribute name="extension"/>
		<sequential>
			<if>
				<available file="${ext.@{extension}.path}" type="dir"/>
				<then>
					<echo message="Found @{extension} in directory ${ext.@{extension}.path}." level="info" taskname="${otmmaddonui.echo.taskname}"/>
					
					<property name="@{extension}.webroot.dir" location="${ext.@{extension}.path}/web/webroot"/>
					<property name="@{extension}.zul.file" location="${@{extension}.webroot.dir}/index.zul"/>
					<property name="@{extension}.zul.backup.dir" location="${@{extension}.webroot.dir}/WEB-INF"/>
					<property name="@{extension}.zul.backup.file.name" value="index.zul.backup"/>
					<property name="@{extension}.zul.backup.file" location="${@{extension}.zul.backup.dir}/${@{extension}.zul.backup.file.name}"/>
					<property name="@{extension}.zul.temp.file.name" value="index_temp.xml"/>
					<property name="@{extension}.zul.temp.file" location="${@{extension}.webroot.dir}/${@{extension}.zul.temp.file.name}"/>
					<if>
						<available file="${@{extension}.zul.backup.file}" type="file"/>
						<then>
							<echo message="Backup of index.zul already exists for extension @{extension}." level="info" taskname="${otmmaddonui.echo.taskname}"/>
						</then>
						<else>
							<echo message="Creating backup of index.zul ..." level="info" taskname="${otmmaddonui.echo.taskname}"/>
							<copy file="${@{extension}.zul.file}" tofile="${@{extension}.zul.backup.file}"/>
							<echo message="Backup file ${@{extension}.zul.backup.file.name} created in directory ${@{extension}.zul.backup.dir}"  level="info" taskname="${otmmaddonui.echo.taskname}"/>
						</else>
					</if>
					
					<delete file="${@{extension}.zul.temp.file}" /> 
					<xslt in="${@{extension}.zul.file}" style="${update.indexzul.xsl}" out="${@{extension}.zul.temp.file}" force="true" >
			        	<param name="cockpit.script.path" expression="${cockpit.script.path}"/>
			        	<param name="cockpit.css.path" expression="${cockpit.css.path}"/>
						<param name="version" expression="${otmmaddonui.version}"/>
			        </xslt>
					
					<if>
						<resourcesmatch>
							<filelist dir="${@{extension}.webroot.dir}">
								<file name="index.zul"/>
								<file name="${@{extension}.zul.temp.file.name}"/>
							</filelist>
						</resourcesmatch>
						<then>
							<echo message="index.zul of @{extension} is up to date." level="info" taskname="${otmmaddonui.echo.taskname}"/>
						</then>
						<else>
							<copy file="${@{extension}.zul.temp.file}" tofile="${@{extension}.zul.file}" overwrite="true"/>
							<echo message="index.zul of @{extension} updated." level="info" taskname="${otmmaddonui.echo.taskname}"/>
						</else>
					</if>
					
					<delete file="${@{extension}.zul.temp.file}" />
					
				</then>
				
				<else>
					<echo message="Extension @{extension} doesn't exist." level="warn" taskname="${otmmaddonui.echo.taskname}"/>
				</else>
			</if>
	
		</sequential>
	</macrodef>
	
	<macrodef name="otmmaddonui_before_build">
		<sequential>
			<echo message="Start to update index.zul files of the following extensions: ${cockpit.extensions.to.update}" level="info" taskname="${otmmaddonui.echo.taskname}"/>
			<for list="${cockpit.extensions.to.update}" param="cursor.extension.to.uptate">
				<sequential>
					<updatezul extension="@{cursor.extension.to.uptate}"/>
				</sequential>
			</for>
		</sequential>
	</macrodef>

</project>

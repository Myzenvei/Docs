


################### TO Increase column size of p_emailAddress column of table EmailAddress#####################
#################### Need to be executed in all environment ########################
import de.hybris.platform.core.Registry;
 
spring.beanDefinitionNames.each {
 
 
conn = Registry.getCurrentTenant().getDataSource().getConnection();
 
stmt = conn.createStatement();
 
alterTableQuery = "alter table emailaddress alter (p_emailAddress varchar(1500))";
 
abc = stmt.executeUpdate(alterTableQuery)
 
 
 
}
 
return "Success"



################### TEND Increase column size of p_emailAddress column of table EmailAddress#####################

################# To Increase tabContent column size for custom tabs on PDP ######################
import de.hybris.platform.core.Registry;

spring.beanDefinitionNames.each {



conn = Registry.getCurrentTenant().getDataSource().getConnection();

stmt = conn.createStatement();

alterTableQuery = "alter table GPProductTabInfo alter (p_tabContent NCLOB)";

abc = stmt.executeUpdate(alterTableQuery)

  

}

return "Success"

########################### End #########################################


####################Change Consignment sequence########################

//code
import de.hybris.platform.servicelayer.keygenerator.impl.PersistentKeyGenerator;
 
PersistentKeyGenerator consignmentCodeGenerator=spring.getBean("consignmentCodeGenerator"); consignmentCodeGenerator.setStart("4000000200");
consignmentCodeGenerator.reset();
consignmentCodeGenerator.generate();
//code
 
 ######################################################################

 ####################Update Tracking URL column dataType########################
 import de.hybris.platform.core.Registry;
 
spring.beanDefinitionNames.each {
conn = Registry.getCurrentTenant().getDataSource().getConnection();
stmt = conn.createStatement();
alterTableQuery = "alter table  shippingNotification alter(P_TRACKINGURL NCLOB)";
abc = stmt.executeUpdate(alterTableQuery);
}
 
return "success";
 
 import de.hybris.platform.core.Registry;
 
spring.beanDefinitionNames.each {
conn = Registry.getCurrentTenant().getDataSource().getConnection();
stmt = conn.createStatement();
alterTableQuery = "alter table  Tracking alter(P_TRACKINGURL NCLOB)";
abc = stmt.executeUpdate(alterTableQuery);
}
 
return "success";
##########################################################################


###############################Update query for categorizationcategory field for breadcrumbs issue###########################
update categories set p_categorizationcategory  = 0

###############################Update query for categorizationcategory field for breadcrumbs issue###########################



######################################3 SITE CONFIG #################################3

import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import de.hybris.platform.cms2.model.site.CMSSiteModel;
 
 
FlexibleSearchService flexibleSearchService=spring.getBean("flexibleSearchService");
String FIND_SITES_QUERY = "SELECT {pk} FROM {CMSSite AS C}";
 
FlexibleSearchQuery query = new FlexibleSearchQuery(FIND_SITES_QUERY);
 
List<CMSSiteModel> searchResult = flexibleSearchService.<CMSSiteModel> search(query).getResult();
String allMapText ="";
 
if(searchResult!=null){
 
  for(CMSSiteModel cmsSite : searchResult){
 
      final Map<String, String> siteConfig = cmsSite.getSiteConfig();
      if (siteConfig != null) {
      Iterator<String> iterator = siteConfig.keySet().iterator();
      
      allMapText = allMapText+"\n\n"+"site :" + cmsSite.getUid()+"\n";
      while (iterator.hasNext()) {
          String key = iterator.next();
                      allMapText  = allMapText + key + "->" + siteConfig.get(key) + ";";
       }
     } //null check
    
    }//for    
}
 
return allMapText


########################################## END SITE CONFIG ###############################
########################################################################################################
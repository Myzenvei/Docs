<?xml version="1.0" encoding="iso-8859-1"?>

<web-app id="otmmaddon" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" 
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>otmmaddon</display-name>
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>


	<filter>
   	<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
<!--
	Enabling Spring managed Delegating Filter Proxy for hybris Filter Stack.
-->
	<filter>
		<filter-name>otmmaddonPlatformFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>otmmaddonPlatformFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>	
	
    <filter>
        <filter-name>OTDCDAMINTERFACEFilter</filter-name>
        <filter-class>org.apache.catalina.filters.RemoteAddrFilter</filter-class>
        <init-param>
            <param-name>allow</param-name>
            <!-- the param-value must be a java.util.regex.Pattern -->
            <!--  next line allows every address: -->
            <param-value>.*</param-value>  
			<!-- Example for localhost: param-value>127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1</param-value>   -->  
			<!-- Example for two addresses: param-value>123.123.123.123|123.123.123.124</param-value>   -->  
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>OTDCDAMINTERFACEFilter</filter-name>
        <url-pattern>/OTDC_DAM_INTERFACE/*</url-pattern> 
    </filter-mapping> 
	
<!--
	Enabling a Spring web application context with 'session' and 'request' scope.
	- The 'contextConfigLocation' param specifies where your configuration files are located.
	- The HybrisContextLoaderListener extends the usual SpringContextLoaderListener (which loads
	  the context from specified location) by adding the global application context of
	  the platform as parent context. With having the global context set as parent you can access
	  or override beans of the global context and get the 'tenant' scope.
	- The RequestContextListener is needed for exposing the 'request' scope to the context.
	  Furthermore it is needed when overriding the 'jalosession' bean for your web application.
 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>WEB-INF/otmmaddon-web-spring.xml</param-value>
	</context-param>

	<listener>
		<listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>
	</listener>
	
	<listener>
    	<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
    <listener>
        <listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
    </listener>
    <servlet>
        <servlet-name>OTDC_DAM_INTERFACE</servlet-name>
        <servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>OTDC_DAM_INTERFACE</servlet-name>
        <url-pattern>/OTDC_DAM_INTERFACE</url-pattern>
    </servlet-mapping>
	
</web-app> 

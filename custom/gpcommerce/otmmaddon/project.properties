##############################################################################
##  Adapt the following settings to your environment                        ##
##############################################################################


##############################################################################
# OTMM Server related properties                                             #
##############################################################################
otmm.server.scheme=http
# otmm.server.domain is an obsolete alias for otmm.server.host
# set otmm.server.host=<YourOTMMHost>
otmm.server.host=
otmm.server.port=11090

# Set the OTMM login details in Hybris Backoffice.  
# If you do not require password encryption, you can also use the configuration
# for login and password below.

# Login of OTMM technical user
#otmm.server.login=
# OTMM User Password
#otmm.server.password=

# Set this property to true to use SSO.
# For details refer to the DAMLink for SAP Solutions hybris Integration:
# Installation and Configuration Guide
#otmm.server.sso = FALSE

# The port configured on Tomcat to receive OTMM notifications.
# If this property is set to 0 (default value), notifications are accepted on
# all Tomcat HTTP and HTTPS listener ports.
# For a productive environment, this port should be set
# to the SSL port of a "Trusted SSL" connector configuration 
# having "authClient=true". See the Tomcat SSL documentation.
#otmm.server.notification.port=0

# Timeout for waiting for the import request to finish (in seconds)
#otmm.import.request.timeout=600

# Polling interval to check the import status (in seconds) 
#otmm.polling.import.request=5

# Timeout for waiting of the export request to finish (in seconds)
#otmm.export.request.timeout=120

# Polling interval to check the export status (in seconds) 
#otmm.polling.export.request=2

# HTTP client communication related timeouts (in seconds)
#otmm.server.http.connection.timeout=30
#otmm.server.http.request.timeout=60 

##############################################################################
# FTP configuration                                                          #
##############################################################################
# FTP credentials needed for Content by Export content delivery.
#
# While invoking the OTMM export service, Hybris reads this server value and
# appends it to its export service request.

# FTP Server
10012=<YourFTPHost>

# Set the FTP login details in Hybris Backoffice. 
# If you do not require password encryption, you can use the configuration
# for the FTP login and password below.

# FTP User for authentication
#10013=
# Password for FTP User
#10014=

# Destination folder of FTP export used by Content By Export Asset Deliver.
# The value below is put in front of the date format and results
# in the folder name:  "<Property value>_yyyyMMdd_HHmmss"
# OTMM will store the result of the export in a FTP sub folder named
# after this calculated name.
# 
# Later, the Hybris sync job uses the same path to read the export content.
10015=ExportData

# FTP port
10016=21

# Use FTP or FTPS (default is FTP) 
#otmm.AssetSync.remote.protocol=FTP
# Use FTPS protocol (SSL/TLS)
otmm.AssetSync.ftps.protocol=SSL
# FTPS port (default 21)
#otmm.AssetSync.ftps.port=21

# Per default the character set used by the FTP server is detected automatically.
# Example UTF-8
# If this doesn't work you can set the encoding explicitly.
#otmm.AssetSync.ftp.encoding=


##############################################################################
# Synchronization directory                                                  #
##############################################################################
# Location where exported files on your local machine are located 
# Only evaluated if  otmm.AssetSync.SourceRepository is set to "Local"
# Example
#otmm.locationOfFiles=D:\\Images
otmm.locationOfFiles=<LocalDirectoryPath>

##############################################################################
# Hybris System Id                                                           #
##############################################################################
# To support more than one hybris system per OTMM server a system id is now
# required. The system id must be unique within the set of
# hybris sysems sharing one OTMM server.
otmm.hybris.systemId=<SystemId>

# Set this to true for upgraded installations with version <16.2.
otmm.hybris.isDefault=false


##############################################################################
##                                                                          ##
## Optional settings - adapt if the default that not fits to your needs     ##
##                                                                          ##
##############################################################################


# Used as proxy if the attributes urlTemplate of UrlDelivery contains {proxy}
# for example otmm.url.template.proxy=http://myhost:8080/proxy
otmm.url.template.proxy=

# For Media Delivery Service the OtmmUrlStrategy value is required to display
# the renditions correctly in Product Cockpit.
media.folder.otmmRoot.url.strategy=otmmUrlStrategy


# Especially with MediaServlet no export process from OTMM is required.
# Therefore otmm.export.isMandatory should be FALSE.
# See Export configuration section below.

# When using the Media Delivery Service, you must set
# the base URL to the Media Delivery Service. 
# The Media Delivery Service can either run within the Hybris Tomcat or within
# a separate Tomcat deployment.
# The URL may also be the URL of the Adaptive Media Delivery servlet
# of the OTMM server.
# In this case you must set useAdaptiveMediaDelivery=TRUE.
# Example for Adaptive Media Delivery URL:
# http://<amd_host>:8080/adaptivemedia/rendition
#otmm.media.servlet.url=\
#http://<mediaservlet_host>:<tomcat_http_port>/ImConvServlet/imconv

# The above URL is used inside the web pages produced by Hybris and displayed
# in a web browser from a machine that is normally not in the same subnet as the 
# Hybris system. Thus it is called the "external" URL. You may also specify an 
# "internal" URL, that Hybris uses itself to talk to the MediaServlet. 
# If not configured, the internal URL is the same as the external URL.
#otmm.media.servlet.internal.url=\
#http://localhost:${tomcat.http.port}/ImConvServlet/imconv


# The Media Delivery Service has a password defined in imconv.properties.
# Make this password known to Hybris either here,
# or better in Backoffice, 
# DAM by OpenText > Logins, click + OTMM Connector Login,
# create an entry with the Identifier MediaServlet and User admin
otmm.media.servlet.pwd=

# If the Media Delivery Service is enabled, Hybris sends requests to the 
# Media Delivery Service during asset assignment to generate
# the renditions early. You can disable this by setting this value to FALSE.
# When set to FALSE, the renditions are created when needed.
# If useCloudUrl is set to TRUE, you must set this parameter to TRUE as well.
# This implies that with useCloudUrl=TRUE there is only early generation
# of renditions.
otmm.media.servlet.prepopulate=TRUE

# With otmm.media.servlet.useCloudUrl=TRUE
# Media Delivery Service writes renditions into the cloud.
# Media Delivery Service is bypassed when renditions are requested.
# When images are stored in the cloud, you can generate URLs pointing directly
# into the cloud.
# With otmm.media.servlet.useCloudUrl=TRUE, the Media Delivery Service
# does not get image requests any more.
# Therefore, you must create the renditions during asset assignment,
# with prepopulate=TRUE.
otmm.media.servlet.useCloudUrl=FALSE

# Hybris generates the cloud URLs according to the following template.
# If it is not specified,
# Hybris obtains the template directly from the Media Delivery Service,
# whose URL and password 
# are specified above, and which must be configured to use the cloud.
# The Azure template has the form
# http://XXX.core.windows.net/<container>/%P%/%R%
# The AWS template has the form
# http://XXX.amazonaws.com/<bucket>/%P%/%R%
# %P% is replaced by a path, %R% by a file name
# Once the servlet has written renditions into the cloud,
# you can see the URLs in the Azure or AWS console.
otmm.media.servlet.cloudUrlTemplate=

# Set to TRUE if the URL provided by otmm.media.servlet.url points to
# the Adaptive Media Delivery servlet of the OTMM server.
# Set to FALSE if you use the Media Delivery Service (ImConvServlet)
# of DAMLink Hybris
otmm.media.servlet.useAdaptiveMediaDelivery = FALSE

# If using the Adaptive Media Delivery servlet, you can set the client id (clid) 
# to be used in AMD requests. The default is SAPDAM.
otmm.media.servlet.amd.clid=SAPDAM

# If you configured the Media Delivery Service to require URLs with secKey,
#  then you may configure the time in hours after which the URL expires.
# Values must be between 1 and 100. Default is 20.
# To configure no expiration date, leave the value empty.
otmm.media.servlet.expiration=20

 

# Determines which catalog is used if all other ways
# to determine a catalog fail.
# This catalog is used for the created Media item and MediaContainer
# This is the order how the catalog is determined 
# 1. The catalogVersion of a Product or CMSItem
# 2. The catalogVersion attribute of a custom type
# 3. The catalog specified by otmmCatId and otmmCatVersion
#    of the OtmmAssignmentStatus entry
# 4. The catalog specified by the properties below
otmm.assignment.defaultCatalog=Default
otmm.assignment.defaultCatalogVersion=Staged



##############################################################################
# MediaFolder configuration                                                  #
##############################################################################
#
# With otmm.media.folder.<ModelType> you can configure the MediaFolder used
# during assignment per OTMM model type
# With "otmm.media.folder.default", you can configure a default folder
# that is used if no model type specific folder is specified.
# Leaving the value empty means that no MediaFolder is set
# for the created Media item. That means Hybris itself decides
# where to store the content.
# The value must be the MediaFolder qualifier. If there is no folder
# with that qualifier a folder with that qualifier is created
# and the same name is used for the path that is a relative path
# to the Hybris data directory.   
otmm.media.folder.default=
otmm.media.folder.OPENTEXT.PRODUCTS=

##############################################################################
# Thumbnail configuration                                                    #
##############################################################################
#
# This property configures a pattern whitelist of mime types.
# If the mime type of a Media item matches a pattern, their OTMM thumbnail is displayed.
# If the property is not configured or has an empty value no thumbnail is used.
#
# Syntax:
# - "*" is wildcard for any character
# - several Mime Type (patterns) can be separated by comma
#
# Examples:
# */* - thumbnails are used for all mime types
# video/* - thumbnails are only used for videos
# application/pdf -  thumbnails are only used for PDF files
otmm.thumbnail.mimes=\
video/*,application/pdf,\
application/msword,application/vnd.ms-word,\
application/vnd.ms-excel,application/excel,\
application/vnd.ms-powerpoint,\
application/powerpoint

# This mime type is returned by the default implementation of
# OtmmThumbnailService.retrieveThumbnailMimeType.  
otmm.thumbnail.fixed.mime=image/jpeg

# Set this to true if you enabled authentication
# for thumbnail URLs in the file
# /otmmws/web/webroot/WEB-INF/config/security-spring.xml
# See the comment there for further details
# If set to true the images are not cached
# by the browser after a session ends.
# that implies that for each user session the URLs are different. 
otmm.thumbnail.protected = false


##############################################################################
# OTMM Model configuration and exported Mime types                           #
##############################################################################

# Possible values are "format\\#<ImageFileExtension>"
# where ImageFileExtension is the extension of an image format
# which the ImageMagick version that is installed with OTMM supports.
otmm.model.image.format.default=format\\#jpg
otmm.model.image.format.OPENTEXT.PRODUCTS=format\\#jpg

# For each entry of otmm.model.image.format.<model> provide
# an entry otmm.model.image.mimetype.<model>
# The mime type must be consistent with the format above.
otmm.model.image.mimetype.default=image/jpeg
otmm.model.image.mimetype.OPENTEXT.PRODUCTS=image/jpeg

##############################################################################
# Export configuration                                                       #
##############################################################################

# Determines if an export is always triggered no matter
# if an export is needed by the configured renditions.
# That means that if the property is set to FALSE and all renditions are
# of type MediaServlet no export job is  started.
otmm.export.isMandatory = FALSE

##############################################################################
# Assignment configuration                                                   #
##############################################################################
# Determines if the files  exported by Content By export are read
# from a local directory or via FTP. 
#otmm.AssetSync.SourceRepository=FTP
otmm.AssetSync.SourceRepository=Local

# Updates an existing OpenTextMedia instance or leaves it as it is.
# The OTMM Connector reuses existing OpenTextMedia items
# if they match the same asset, asset delivery name,  and catalog version.
# If otmm.AssetSync.updateExisting is set to TRUE
# the content of the OpenTextMedia item is updated with the new image.
# Otherwise it is only created but never updated.
# Be aware that all products using this OpenTextMedia item
# will also update their images.
# However, the update will not happen automatically
# after changing the rendering format
# but it is done if someone assigns the same asset
# with the same asset delivery and within the same catalog version. 
otmm.AssetSync.updateExisting = FALSE

##############################################################################
# List of models for which assets must be approved before assignment         #
##############################################################################
# If you use Lifecycle Management and
# if you want that only approved assets are available for assignment,
# then add a comma separated list of the models
# for which assets require approval.
# Assets belonging to these models are only available for assignment
# if their field
# "ARTESIA.FIELD.LIFECYCLE APPROVAL STATE" has the value APPROVED.
otmm.approved.models.list=


##############################################################################
# CronJob configuration for DAMLink Hybris extensions                        #
##############################################################################

# Properties for OTMM Association Purge Job
# All OtmmAssignmentStatus (Asset Assignment Status)
# which creation time is older than the provided time and
# are synchronized or still in processing state are deleted.
# To delete the entries created two days ago configure
# timeToSubtract=2 and durationOfTime=days;
# Possible values for durationOfTime are "days", "hours", and "minutes".
# If nothing is provided then the default value is taken which is 1 day. 
otmm.purgeJob.OTMMAssetProduct.timeToSubtract=1
otmm.purgeJob.OTMMAssetProduct.durationOfTime=hours

# Sets how many entries of OtmmAssignmentStatus (Asset Assignment Status)
# are processed per run of the otmmExportServiceJob CronJob (default = 100)
otmm.exportServiceJob.batchSize=100

# Sets after how many successive failed entries of OtmmAssignmentStatus
# the otmmExportServiceJob CronJob is aborted (default = 5).
otmm.exportServiceJob.maxFailedSize=5

# Sets how many entries of OtmmAssignmentStatus are  processed per run
# of the otmmAssetSyncJob  CronJob  (default = 100)
otmm.assetSyncJob.batchSize=100

# Sets after how many successive failed entries of OtmmAssignmentStatus
# the otmmAssetSyncJob CronJob is aborted (default = 5).
otmm.assetSyncJob.maxFailedSize=5

##############################################################################
# Localization                                                               #
##############################################################################

# Language used for the Media Container name attribute. Default is the Hybris
# default language.
#otmm.language.mediacontainer=

##############################################################################
# Logging                                                                    #
##############################################################################

## Project specific Logging
OTMM_LOG_DIR=${platformhome}/../../log/otmm_connector

## Issue for Hybris 6.0: The RollingFile appender
## wrongly creates empty files as "rolled files"! 
## The issue is related to the log4j2 version used by Hybris 6.0.
# otmm appender configuration:
log4j2.appender.otmm.type = RollingFile
log4j2.appender.otmm.name = OTMM_LOG
log4j2.appender.otmm.fileName = ${OTMM_LOG_DIR}/otmmaddon.log
log4j2.appender.otmm.filePattern = ${OTMM_LOG_DIR}/otmmaddon-%i.log
log4j2.appender.otmm.layout.type = PatternLayout
log4j2.appender.otmm.layout.pattern = \
%d{yyyy-MMM-dd HH:mm:ss,SSS} %-5p [%t] [%c] - %m%n
log4j2.appender.otmm.policies.type = Policies
log4j2.appender.otmm.policies.size.type = SizeBasedTriggeringPolicy 
log4j2.appender.otmm.policies.size.size = 10MB
log4j2.appender.otmm.strategy.type = DefaultRolloverStrategy
log4j2.appender.otmm.strategy.max = 10

# Configuration of loggers which use the otmm appender:
# otmmconnector logger
log4j2.logger.otmmconnector.name = com.opentext.hybris.otmmconnector
log4j2.logger.otmmconnector.additivity = false
log4j2.logger.otmmconnector.level=warn
log4j2.logger.otmmconnector.appenderRefs = otmm
log4j2.logger.otmmconnector.appenderRef.otmm.ref = OTMM_LOG
# otmmconnectorapi logger used by the public API 
log4j2.logger.otmmconnectorapi.name=OTMMConnectorPublicAPI
log4j2.logger.otmmconnectorapi.additivity = false
log4j2.logger.otmmconnectorapi.level=warn
log4j2.logger.otmmconnectorapi.appenderRefs = otmm
log4j2.logger.otmmconnectorapi.appenderRef.otmm.ref = OTMM_LOG


#log4j2.logger.otmmservice.name = \
#com.opentext.hybris.otmmconnector.service
#log4j2.logger.otmmservice.additivity = false
#log4j2.logger.otmmservice.level=debug
#log4j2.logger.otmmservice.appenderRefs = otmm
#log4j2.logger.otmmservice.appenderRef.otmm.ref = OTMM_LOG


# SAP logger
# The log files are written into a format
# read by the LogViewer application of NetWeaver.
#log4j2.appender.otmmsap.type = RollingFile
#log4j2.appender.otmmsap.name = OTMM_SAP_LOG
#log4j2.appender.otmmsap.fileName = ${OTMM_LOG_DIR}/otmmaddon_sap.log
#log4j2.appender.otmmsap.filePattern = ${OTMM_LOG_DIR}/otmmaddon_sap-%i.log
#log4j2.appender.otmmsap.layout.type = SapOTPatternLayout
#log4j2.appender.otmmsap.policies.type = Policies
#log4j2.appender.otmmsap.policies.size.type = SizeBasedTriggeringPolicy 
#log4j2.appender.otmmsap.policies.size.size = \
#${log4j2.appender.otmm.policies.size.size}
#log4j2.appender.otmmsap.strategy.type = DefaultRolloverStrategy
#log4j2.appender.otmmsap.strategy.max = ${log4j2.appender.otmm.strategy.max}

## Sample configuration which adds the "otmmsap" appender
# at the end of the appenders list: 
#log4j2.logger.otmmconnectorapi.appenderRefs = otmm, otmmsap
#log4j2.logger.otmmconnectorapi.appenderRef.otmm.ref = OTMM_LOG
#log4j2.logger.otmmconnectorapi.appenderRef.otmmsap.ref = OTMM_SAP_LOG
#
#log4j2.logger.otmmconnector.appenderRefs = otmm, otmmsap
#log4j2.logger.otmmconnector.appenderRef.otmm.ref = OTMM_LOG
#log4j2.logger.otmmconnector.appenderRef.otmmsap.ref = OTMM_SAP_LOG

## Performance measurement logging
## The data is logged in CSV format.
#
#log4j2.appender.otmmperf.type = RollingFile
#log4j2.appender.otmmperf.name = OTMM_PERF_LOG
#log4j2.appender.otmmperf.fileName = ${OTMM_LOG_DIR}/otmm_perf.csv
#log4j2.appender.otmmperf.filePattern = \
#${OTMM_LOG_DIR}/otmm_perf.%d{yyyy-MM-dd}.csv
#log4j2.appender.otmmperf.layout.type = PatternLayout
#log4j2.appender.otmmperf.layout.pattern = \
#%d{yyyy-MMM-dd HH:mm:ss,SSS};%t;%c;%m%n
#log4j2.appender.otmmperf.policies.type = Policies
#log4j2.appender.otmmperf.policies.time.type = TimeBasedTriggeringPolicy
#log4j2.appender.otmmperf.policies.time.interval = 1
#log4j2.appender.otmmperf.policies.time.modulate = true
#log4j2.appender.otmmperf.strategy.type = DefaultRolloverStrategy
#log4j2.appender.otmmperf.strategy.max = 10
#
#log4j2.logger.otmmperformance.name = \
#com.opentext.hybris.otmmconnector.Performance
#log4j2.logger.otmmperformance.additivity = false
#log4j2.logger.otmmperformance.level=trace
#log4j2.logger.otmmperformance.appenderRefs = otmmperf
#log4j2.logger.otmmperformance.appenderRef.otmmperf.ref = OTMM_PERF_LOG

## Logging of REST calls to OTMM
#log4j2.appender.otmmrestlog.type = RollingFile
#log4j2.appender.otmmrestlog.name = OTMMREST_LOG
#log4j2.appender.otmmrestlog.fileName = ${OTMM_LOG_DIR}/otmmrest.log
#log4j2.appender.otmmrestlog.filePattern = ${OTMM_LOG_DIR}/otmmrest-%i.log
#log4j2.appender.otmmrestlog.layout.type = PatternLayout
#log4j2.appender.otmmrestlog.layout.pattern = \
# %d{yyyy-MMM-dd HH:mm:ss,SSS} %-5p [%t] [%c] - %m%n
#log4j2.appender.otmmrestlog.policies.type = Policies
#log4j2.appender.otmmrestlog.policies.size.type = SizeBasedTriggeringPolicy
#log4j2.appender.otmmrestlog.policies.size.size = 10MB
#log4j2.appender.otmmrestlog.strategy.type = DefaultRolloverStrategy
#log4j2.appender.otmmrestlog.strategy.max = 10
#
#log4j2.logger.otmmrest.name = OtmmClientLoggingFilter
#log4j2.logger.otmmrest.additivity = false
#log4j2.logger.otmmrest.level=trace
#log4j2.logger.otmmrest.appenderRefs = otmmrestlog
#log4j2.logger.otmmrest.appenderRef.otmmrest.ref = OTMMREST_LOG

# Former hybris.log configuration converted to new log4j2 syntax
#log4j2.appender.hybris.type = RollingFile
#log4j2.appender.hybris.name = HYBRIS_LOG
#log4j2.appender.hybris.fileName = ${HYBRIS_LOG_DIR}/hybris.log
#log4j2.appender.hybris.filePattern = ${HYBRIS_LOG_DIR}/hybris-%i.log
#log4j2.appender.hybris.layout.type = PatternLayout
#log4j2.appender.hybris.layout.pattern = \
#%d{yyyy-MMM-dd HH:mm:ss,SSS} %-5p [%t] [%c] - %m%n
#log4j2.appender.hybris.policies.type = Policies
#log4j2.appender.hybris.policies.size.type = SizeBasedTriggeringPolicy 
#log4j2.appender.hybris.policies.size.size = 10MB
#log4j2.appender.hybris.strategy.type = DefaultRolloverStrategy
#log4j2.appender.hybris.strategy.max = 10
#
#log4j2.rootLogger.level = info
#log4j2.rootLogger.additivity = false
#log4j2.rootLogger.appenderRefs = stdout, hybris
#log4j2.rootLogger.appenderRef.stdout.ref = STDOUT
#log4j2.rootLogger.appenderRef.hybris.ref = HYBRIS_LOG


##############################################################################
# Configuration how a Product Cockpit user can reach OTMM                    #
##############################################################################

## The values HTTP or HTTPS are possible.
## Default is the value of the otmm.server.scheme property
#otmm.server.for.productcockpit.users.protocol=http

## Fully-qualified OTMM host name.
## Default is the value of the otmm.server.host property
#otmm.server.for.productcockpit.users.host=localhost

## OTMM port.
## Default is the value of theotmm.server.port property
#otmm.server.for.productcockpit.users.port=11090

## Base-URL how a Product Cockpit user can access OTMM 
otmm.server.for.productcockpit.users.baseurl=/otmm/ux-html/index.html

## Base-URL for SSO login into OTMM from Product Cockpit. 
otmm.server.for.productcockpit.users.baseloginurl=/otmmapi/v3/sessions

## If set to true automatic login is performed even if SSO is disabled
## (otmm.server.sso=false).
## In case of true automatic login is done with the technical user specified
## in otmm.server.login.
## Default is false.
otmm.server.for.productcockpit.users.isPreAuthenticationForTechnicalUserEnabled=false


##############################################################################
# Asset upload configuration                                                 #
##############################################################################

## The maximal upload size of the component.
## A value of -1 means that there is no limitation.
## Specify in KB.
otmm.upload.max.upload.size.in.kb=-1

## For details please find http://www.w3schools.com/tags/att_input_accept.asp
## Examples:
## The value 'image/jpeg, image/png' accepts JPEG and PNG files.
## The value 'image/*' accepts images.
## The value 'video/mpeg' accepts MPEG videos.
#otmm.upload.html.accept.attribute=

## Only affects UploadButtonWidget
## The Asset Assignment Dialog and DropFileWidget aren't affected.
otmm.is.multi.upload.enabled=true

## Maximum number of uploads running in parallel per upload process
otmm.max.number.of.parallel.uploads.per.upload.process=5

## Time in milliseconds to wait until the next check after an upload
## has been completed
otmm.time.intervall.to.check.running.uploads=3000

##############################################################################
# Asset assignment configuration                                             #
##############################################################################

## Maximum number of asset assignments running in parallel
otmm.max.number.of.parallel.assetassignments=5

## Time in milliseconds to wait until the next check after an
# asset assignment has been completed
otmm.time.intervall.to.check.running.assetassignment=3000



##############################################################################
# Cockpit editor configuration                                               #
##############################################################################

## The Asset Assignment Dialog shows this OTMM folder and all subfolders.
## - In case of an empty value all OTMM folders are visible.
## - In case of 'Public Folders' only public folders and
#    subfolders are visible.
## Otherwise the value must be a valid ID of a OTMM Container,
## for example '64bb9c93c0941f7aa25fabb38e539a396b9fd887'
##
## This value is a default which can be overwritten
# in the editor configuration using the editor parameter 'otmmRootFolderId'.
otmm.directory.root.name=

## If someone wants to upload an asset the Asset Assignment Dialog
## offers a selection of OTMM property templates.
## - Property template IDs must be specified.
## - Multiple property template IDs must be separated with semicolons.
## - Non existing property template IDs are ignored.
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'otmmUploadPropertyTemplateIds'.
otmm.upload.property.template.ids=

## For usage with MediaContainerLists, for example
## with the galleryImages attribute.
## This is the MediaFormat (qualifier) of the image to be displayed.
## Default is 300Wx300H. 
## If no image with the MediaFormat as configured here or
## with default format exists, the first image in the MediaContainer is taken.
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'mediaContainerDisplayFormat'.
otmm.media.container.display.format=300Wx300H

## Option to make the checkbox for update to latest version
## visible or invisible in the Asset assignment dialog.
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'isAutomaticallyUpdateToLatestAssetVersionVisible'.
otmm.is.automatically.update.to.latest.asset.version.visible=true

## Default setting for automatic update to latest version:
## If the checkbox is enabled, then the default setting controls
## whether the checkbox is initially marked or not.
## If the checkbox is disabled, then the default setting controls
#  whether the assignments are always created for update
## to latest version or not (without user control).
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'automaticallyUpdateToLatestAssetVersionDefault'.
otmm.automatically.update.to.latest.asset.version.default=false

## Display the button to view an asset in OTMM .
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'isAssetInspectorLaunchButtonVisible'.
otmm.is.asset.inspector.launch.button.visible=true

## This parameter configures the rendition that can be selected.
## - The single values must be the name of the wanted OtmmAssetDelivery.
## - Multiple Asset Delivery definitions have to be separated with semicolons.
## - Non existing Asset Delivery definitions or invalid values are ignored.
## 
## for example 
## otmm.selectable.assetDeliveries=<Name1>;<Name2>;<Name3>
##
## This value is a default which can be overwritten
## in the editor configuration using the editor parameter
## 'selectableAssetDeliveries'.
## If both settings have empty values,
## no selection is provided in the assignment dialog.
otmm.selectable.assetDeliveries=


## Backoffice only - 
## Shall the Plus Button be shown inside the Media Reference Editor
otmm.is.media.reference.editor.show.upload.widget.button.visible=false

## Backoffice only - 
## Shall the Plus Button be shown inside the Multi Media Reference Editor
otmm.is.multi.media.reference.editor.show.upload.widget.button.visible=false

# Custom column configuration
# This feature is only available in cockpit UIs
## (for example Product Cockpit, CMS Cockpit) but not in Backoffice
# You can configure additional columns in the Asset Assignment dialog
## for any scalar field of an asset.
# The additional columns are added after the Mime Type column.
# It is also possible to configure custom columns
# in the editor configuration using the editor parameter "customAssetColumns".
# 
# Syntax:
# <FieldId>,<Width>,<Header>;<FieldId>,<Width>,<Header>;...
#
# Multiple columns are separated by ";"
# and the different configuration parts for a column by ",".
# <FieldId> - the id of the scalar field
#             for example ARTESIA.FIELD.DATE IMPORTED
# <Width> - Either a fixed width in pixels
#           for example "100px" or "_" for automatic width.
# <Header> - the non-localized column label
#            for example "Import Date"
#
# Example:
# otmm.custom.asset.columns=ARTESIA.FIELD.DATE IMPORTED,100px,\
# Import Date;ARTESIA.FIELD.CONTENT TYPE,_,Content Type
#
otmm.custom.asset.columns=

# Configures if the last text search expression is run again
# when the assignment dialog is opened.
# If it is true the last search is executed again
# otherwise it starts with empty search.
# It is also possible to configure this in the editor configuration
# using the editor parameter "recoverLastSearchCondition".
otmm.recover.last.search.condition=false

# Only assets which have the specified OTMM Content Types
# are displayed in the Asset Assignment dialog.
# Separate multiple Content Types by comma.
# for example
# otmm.content.types.filter=VIDEO,BITMAP
otmm.content.type.filter=

##############################################################################
# Metadata synchronization                                                   #
##############################################################################

# Enables the metadata synchronization between Hybris and OTMM if set to true.
# Refer to the DAMLink for SAP Solutions hybris Integration:
# Installation and Configuration Guide 
# and the release notes before you enable this feature. 
otmm.metadata.synchronization.enabled = false

# This property configures a pattern whitelist of catalogs
# for which items are tracked by Metadata Synchronization.
# If the property is not configured
# or has an empty value the default "*/Staged" is used.
# If the changed or deleted item is a Product CMSItem,
# or an Item that contains an attribute named "catalogVersion"
# of the CatalogVersion type then the Catalog Version is matched against
# the configured catalog list.
# If it matches the catalog the change is tracked.
#
# Syntax:
# - "*" is wildcard for any character
# - Catalog Id and Catalog Version part must be separated by "/"
#   e.g. "apparelProductCatalog/Staged"
# - several Catalogs (Patterns) can be separated by comma
#
# Examples:
# */* - all catalog versions are synchronized
# */Staged - all catalog versions with version named "Staged" are tracked.
# */Staged,*electronics*/* - all catalog versions with version named
#                            "Staged" and all catalogs with "electronics"
#                            in their name are tracked.
#
otmm.metadata.synchronization.catalogs=*/Staged

##############################################################################
# Correspondent creation                                                     #
##############################################################################
# Enables the correspondent creation
otmm.correspondent.creation.enabled = false

##############################################################################
# AutoAssetJob (Automatically assign assets to products)                     #
##############################################################################

# Example where the product id is stored in a tabular field
#otmm.auto.productid.field = AUTO.TABULAR.GROUP/AUTO.TABULAR.PRODUCT ID

# Example where the product id is stored in a scalar field
#otmm.auto.productid.field = AUTO.SCALAR.PRODUCT ID

# Example where the product id is stored in a scalar field
# in the enclosing folder
#otmm.auto.productid.field = AUTO.FOLDER.PRODUCT ID

# Set to true if productid.field is inherited from enclosing folder
#otmm.auto.productid.field.isinherited=false

# assigned.field normally == productid.field with last component
# replaced with "ASSIGNED",
# but it can also be specified explicitly,
# especially if productid.field is inherited.
#otmm.auto.assigned.field = AUTO.SCALAR.ASSIGNED

# The Hybris attribute is either determined from the asset name,
# or from an attributeid.field.  
# Example where the attribute id is stored in a tabular field
#otmm.auto.attributeid.field = AUTO.TABULAR.GROUP/AUTO.TABULAR.ATTRIBUTE ID

# Example where the attribute id is stored in a scalar field
#otmm.auto.attributeid.field = AUTO.SCALAR.ATTRIBUTE ID

# The Hybris attribute may be multilingual. The locale of the attribute
# may be specified by the locale field.
# Example where the locale is stored in a tabular field
#otmm.auto.locale.field = AUTO.TABULAR.GROUP/AUTO.TABULAR.LOCALE
# In this case the table must be the same as for the attributeid.field.

# Example where the locale is stored in a scalar field
#otmm.auto.locale.field = AUTO.SCALAR.LOCALE

# When a systemid field is specified, then the AutoAssignJob
# will only search for assets
# where the systemid stored in the field matches
# the system id of Hybris (see otmm.hybris.systemId above)
# Example where the system id is stored in a tabular field
#otmm.auto.systemid.field = AUTO.TABULAR.GROUP/AUTO.TABULAR.SYSTEM ID

# Example where the system id is stored in a scalar field
#otmm.auto.systemid.field = AUTO.SCALAR.SYSTEM ID

# Example where the system id is stored in a scalar field in the enclosing folder
#otmm.auto.systemid.field = AUTO.FOLDER.SYSTEM ID

# Set to true if systemid.field is inherited from enclosing folder
#otmm.auto.systemid.field.isinherited=false

# With useAssetName=true,
# the product id is derived from the stem of the asset name.
# With useAssetName=true, the attribute id is derived
# from the suffix of the asset name, unless an attributeid.field is specified.
#otmm.auto.useAssetName=false

# If true, whatever was derived as OTMM product id is matched
# against the Hybris product EAN instead of product id
#otmm.auto.useEan=false

# Determines after how many successive failed assignments
# the CronJob otmmAutoAssignJob is aborted (default = 5).
otmm.autoAssignJob.maxFailedSize=5

# The following otmm.impex rules are taken, if useAssetName == true
# The stem of the asset name (for example hammer for hammer.jpg)
# is taken as the product id.
# With impex.stem, file suffixes of asset names are mapped without versions 
# (that is the "main" asset, like hammer.jpg) to an attribute id.
# The numbers must be sequential, to fill any gaps,
# you may use impex.stem.i.suffix=skip
#otmm.impex.stem.0.suffix=.jpg
#otmm.impex.stem.0.attribute=picture
#otmm.impex.stem.1.suffix=.png
#otmm.impex.stem.1.attribute=picture
#otmm.impex.stem.2.suffix=.psd
#otmm.impex.stem.2.attribute=picture
#otmm.impex.stem.3.suffix=.pdf
#otmm.impex.stem.3.attribute=data_sheet
#otmm.impex.stem.4.suffix=.mp4
#otmm.impex.stem.4.attribute=detail

# With impex.versioned, file suffixes of asset names
# are mapped with versions (like hammer_2.jpg) 
# to an attribute id. Here, all versioned assets
# are stored with the attribute galleryImages
#otmm.impex.versioned.0.suffix=.jpg
#otmm.impex.versioned.0.attribute=galleryImages

# The default for the character separating the version from the stem is "_", for example hammer_2.jpg.
# With versionDelim you can specify a different character, for example "-" for hammer-2.jpg.
#otmm.impex.versionDelim=-


##############################################################################
# HTML5 Asset Assignment Dialog                                              #
##############################################################################

otmm.backoffice.is.zk.based.asset.assignment.dialog.enabled=false


##############################################################################
# Backoffice OAuth2 Settings - necessary for HTML5 Dialog                    #
##############################################################################

otmm.backoffice.oauth2.client.id=otmmbackoffice
		
# Comma separated scopes
otmm.backoffice.oauth2.scopes=basic
		
# Comma separated resource ids
otmm.backoffice.oauth2.resource.ids=otmmws

# Comma separated list of granted authorities
otmm.backoffice.oauth2.granted.authorities=

##############################################################################
# Settings for automatic OTMM folder creation when a new product is created  #
##############################################################################

# The otmm.props fields describe which properties are extracted from a product
# that is an instance of the specified ProductModel:
# E.g. FlowerProduct is assumed to have simple String properties for Colour or Botanical Name,
# in addition to the properties inherited from Product.
# For more complex properties we may extract them via Spring SpelExpressions.
# Properties may be required or optional. Required properties must exist.
#otmm.props.FlowerProduct.required=CommonName
#otmm.props.FlowerProduct.optional=Colour,Height,BotanicalName
#otmm.props.Product.required=code,catalogMnemonic(catalogVersion.mnemonic),catalogId(catalogVersion.catalog.id),catalogVersion(catalogVersion.version),pk
#otmm.props.Product.optional=name(name["en"]),description(description["en"]),ean
#otmm.props.ApparelProduct.required=gender(genders[0].code)
#otmm.props.ApparelStyleVariantProduct.required=style
#otmm.props.ApparelSizeVariantProduct.required=size


##############################################################################
##                                                                          ##
##                     Advanced Settings                                    ##
##                                                                          ##
##############################################################################

# Be careful with any changes in this section!
# Inappropriate configuration settings may result in data inconsistency!

# This option is for performance optimization in very specific scenarios.
# If set to true, the assetSync CronJob assumes that all the OTMM exports
# are finished and were successful.
# Please do not use this option, unless you are sure
# that all the OTMM exports are processed and were successful!
# Note: A successful ExportService CronJob run does not guarantee
#       that all the OTMM exports were successful,
#       as the CronJob only initiated the asynchonous OTMM export!
#otmm.internal.assetSyncJob.skipCheckJobResult=false

#
# Change the following parameter to "TRUE" for a development machine,
# if the embedded DB (HSQLDB) is used. 
# This DB doesn't support "EXCLUSIVE LOCK",
# needed for running in a Hybris production environment.
# The default value for this parameter is "FALSE". 
#
#otmm.db.ignore.exclusive.lock=FALSE

# Specifies the location of the spring context file
# put automatically to the global platform application context.
otmm.connector.extensions.context=otmm-extensions-spring.xml
otmmaddon.application-context=otmmaddon-spring.xml,\
${otmm.connector.extensions.context}